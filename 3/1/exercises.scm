; 1)
(define (make-accumulator total)
  (lambda (amount)
    (set! total (+ total amount))
    total))

; 2)
(define (make-monitored f)
  (let ((calls 0))
    (lambda args
      (if (and (not (null? args))
               (eq? 'how-many-calls? (car args)))
        calls
        (begin
          (set! calls (+ calls 1)) 
          (apply f args))))))

; 3)
(define (make-account password balance)
  (let ((illegal-access-count 0)
        (access-limit 7))
    (define (withdraw amount)
      (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    ; 4)
    (define (bad-password . args)
      (set! illegal-access-count (+ illegal-access-count 1))
      (if (> illegal-access-count access-limit)
        (call-the-cops)
        "Incorrect password"))
    (define (call-the-cops)
      "The cops have been called")
    (define (dispatch p m)
      (cond ((not (eq? p password)) bad-password)
            ((eq? 'withdraw) withdraw)
            ((eq? 'deposit) deposit)
            ((else (error "Unkown request -- MAKE-ACCOUNT"
                          m)))))
    dispatch))

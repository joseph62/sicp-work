; 1)
(define (make-accumulator total)
  (lambda (amount)
    (set! total (+ total amount))
    total))

; 2)
(define (make-monitored f)
  (let ((calls 0))
    (lambda args
      (if (and (not (null? args))
               (eq? 'how-many-calls? (car args)))
        calls
        (begin
          (set! calls (+ calls 1)) 
          (apply f args))))))

; 3)
(define (make-account password balance)
  (let ((illegal-access-count 0)
        (access-limit 7))
    (define (withdraw amount)
      (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    ; 4)
    (define (bad-password . args)
      (set! illegal-access-count (+ illegal-access-count 1))
      (if (> illegal-access-count access-limit)
        (call-the-cops)
        "Incorrect password"))
    (define (call-the-cops)
      "The cops have been called")
    (define (dispatch p m)
      (cond ((not (eq? p password)) bad-password)
            ((eq? 'withdraw) withdraw)
            ((eq? 'deposit) deposit)
            ((else (error "Unkown request -- MAKE-ACCOUNT"
                          m)))))
    dispatch))

; 5)
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))))

(define (rectangle-area x1 y1 x2 y2)
  (let ((l (abs (- x2 x1)))
        (w (abs (- y2 y1))))
    (* l w)))


(define (estimate-integral p x1 y1 x2 y2 trials)
  (* (rectangle-area x1 y1 x2 y2)
     (monte-carlo trials
                  (lambda ()
                    (p (random-in-range x1 x2)
                       (random-in-range y1 y2))))))
